import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import {
  getAutogeneratedPublicationOG,
} from '@starter-kit/utils/social/og';
import request from 'graphql-request';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import { Container } from '../components/container';
import { AppProvider } from '../components/contexts/appContext';
import { Header } from '../components/header';
import { Layout } from '../components/layout';
import PublicationFooter from '../components/publication-footer';
import StaticPageContent from '../components/static-page-content';
import {
  MorePostsByPublicationDocument,
  MorePostsEdgeFragment,
  PageByPublicationDocument,
  PostFullFragment,
  PublicationFragment,
  SinglePostByPublicationDocument,
  StaticPageFragment,
} from '../generated/graphql';

type PageProps = {
  type: 'page';
  page: StaticPageFragment;
  publication: PublicationFragment;
};

type Props = PageProps;

const Page = ({ page }: PageProps) => {
  const title = page.title;
  return (
    <>
      <Head>
        <title>{title}</title>
      </Head>
      <div className="blog-page-area mx-auto min-h-screen px-4 py-8 md:w-2/3 md:p-10">
        <StaticPageContent pageContent={page} isHomePage={page.slug === 'home'} />
      </div>
    </>
  );
};

export default function PostOrPage(props: Props) {
  const publication = props.publication;
  const description =
    publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`;

  return (
    <AppProvider publication={publication}>
      <Layout>
        <Head>
          <title>
            {publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
          </title>
          <meta name="description" content={description} />
          <meta property="twitter:card" content="summary_large_image" />
          <meta
            property="twitter:title"
            content={publication.displayTitle || publication.title || 'Hashnode Blog Starter Kit'}
          />
          <meta property="twitter:description" content={description} />
          <meta
            property="og:image"
            content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
          />
          <meta
            property="twitter:image"
            content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)}
          />
          <script
            type="application/ld+json"
            dangerouslySetInnerHTML={{
              __html: JSON.stringify(addPublicationJsonLd(publication)),
            }}
          />
        </Head>
        <Header isHome={false} currentMenuId={props.page.slug} />
        <Container>
          <article className="flex flex-col items-start gap-10 pb-10">
            <Page {...props} />
          </article>
        </Container>
        <PublicationFooter
          authorName={publication.author.name}
          title={publication.title}
          imprint={publication.imprint}
          disableFooterBranding={publication.preferences.disableFooterBranding}
          isTeam={publication.isTeam}
          logo={publication.preferences.logo}
          darkMode={publication.preferences.darkMode}
        />
      </Layout>
    </AppProvider>
  );
}

type Params = {
  slug: string;
};

export const getStaticProps: GetStaticProps = async () => {

  const endpoint = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;
  const host = process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST;
  // Hardcode to 'home' since this page will only be rendered for a home page
  const slug = 'home';

  const [postData, morePostsData] = await Promise.all([
    request(endpoint, SinglePostByPublicationDocument, { host, slug }),
    request(endpoint, MorePostsByPublicationDocument, { first: 4, host }),
  ]);

  if (postData.publication?.post) {
    return {
      props: {
        type: 'post',
        post: postData.publication.post,
        morePosts: morePostsData.publication?.posts.edges ?? [],
        publication: postData.publication,
      },
      revalidate: 1,
    };
  }

  const pageData = await request(endpoint, PageByPublicationDocument, { host, slug });

  if (pageData.publication?.staticPage) {
    return {
      props: {
        type: 'page',
        page: pageData.publication.staticPage,
        publication: pageData.publication,
      },
      revalidate: 1,
    };
  }

  return {
    notFound: true,
    revalidate: 1,
  };
};
