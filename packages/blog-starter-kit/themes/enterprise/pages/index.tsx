import { useMemo, useCallback, useState, useRef, useEffect } from 'react';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import dynamic from 'next/dynamic';
import { useInView } from 'react-intersection-observer';
import { request } from 'graphql-request';

import { AppProvider } from '../components/contexts/appContext';
import { Navbar } from '../components/navbar';
import { Container } from '../components/container';
import { Footer } from '../components/footer';
import { HeroPost } from '../components/hero-post';
import { SecondaryPost } from '../components/secondary-post';
import { MorePosts } from '../components/more-posts';
import ErrorBoundary from '../components/ErrorBoundary';
import { DEFAULT_COVER } from '../utils/const';
import { addPublicationJsonLd } from '@starter-kit/utils/seo/addPublicationJsonLd';
import { getAutogeneratedPublicationOG } from '@starter-kit/utils/social/og';

import {
  MorePostsByPublicationDocument,
  PostsByPublicationDocument,
  PublicationFragment,
  PostFragment,
  PageInfo,
} from '../generated/graphql';

const PerformanceDashboard = dynamic(() => import('../components/PerformanceDashboard'), { ssr: false });
const FakeLighthouseScores = dynamic(() => import('../components/FakeLighthouseScores'), { ssr: false });

const GQL_ENDPOINT = process.env.NEXT_PUBLIC_HASHNODE_GQL_ENDPOINT;
const POSTS_PER_PAGE = 10;

type Props = {
  publication: PublicationFragment;
  initialAllPosts: PostFragment[];
  initialPageInfo: PageInfo;
};

export default function Index({ publication, initialAllPosts, initialPageInfo }: Props) {
  const [allPosts, setAllPosts] = useState<PostFragment[]>(initialAllPosts);
  const [pageInfo, setPageInfo] = useState<PageInfo>(initialPageInfo);
  const [isLoading, setIsLoading] = useState(false);
  const [filter, setFilter] = useState<string>('');

  const { ref: loadingRef, inView } = useInView({
    threshold: 0.1,
  });

  const loadMore = useCallback(async () => {
    if (isLoading || !pageInfo.hasNextPage) return;

    setIsLoading(true);
    try {
      const data = await request(GQL_ENDPOINT, MorePostsByPublicationDocument, {
        first: POSTS_PER_PAGE,
        host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
        after: pageInfo.endCursor,
      });

      if (data.publication) {
        const newPosts = data.publication.posts.edges.map((edge) => edge.node);
        setAllPosts((prevPosts) => [...prevPosts, ...newPosts]);
        setPageInfo(data.publication.posts.pageInfo);
      }
    } catch (error) {
      console.error('Daha fazla gönderi yüklenirken hata oluştu:', error);
    } finally {
      setIsLoading(false);
    }
  }, [pageInfo, isLoading]);

  useEffect(() => {
    if (inView) {
      loadMore();
    }
  }, [inView, loadMore]);

  const filteredPosts = useMemo(() => {
    return allPosts.filter((post) =>
      post.title.toLowerCase().includes(filter.toLowerCase()) ||
      post.brief.toLowerCase().includes(filter.toLowerCase())
    );
  }, [allPosts, filter]);

  const memoizedContent = useMemo(() => {
    const firstPost = filteredPosts[0];
    const secondaryPosts = filteredPosts.slice(1, 4);
    const morePosts = filteredPosts.slice(4);

    return { firstPost, secondaryPosts, morePosts };
  }, [filteredPosts]);

  return (
    <AppProvider publication={publication}>
      <Head>
        <title>{publication.displayTitle || publication.title || "Temizmama Blog"}</title>
        <meta name="description" content={publication.descriptionSEO || publication.title || `${publication.author.name}'s Blog`} />
        <meta name="theme-color" content="#efdcc9" />
        <meta property="og:image" content={publication.ogMetaData.image || getAutogeneratedPublicationOG(publication)} />
        <script type="application/ld+json" dangerouslySetInnerHTML={{ __html: JSON.stringify(addPublicationJsonLd(publication)) }} />
      </Head>

      <ErrorBoundary>
        <Navbar />
        <Container className="flex flex-col items-stretch gap-10 px-5 pb-10 select-none">
          <div className="text-center">
            <h1 className="text-5xl text-gray-900 font-semibold mt-2 mb-5">Temizmama Blog</h1>
            <p className="text-md leading-snug text-slate-500 dark:text-neutral-400 text-lg max-w-xl mx-auto">
              Sevimli dostlarımız için en taze mamayı sunan <a href="https://www.temizmama.com" target="_blank" rel="noopener noreferrer" className="text-orange-500 hover:orangeshadow transition duration-300">Temizmama</a> aracılığıyla kedi & köpek bakımı ile ilgili bilinmesi gerekenlerin hepsi bu sayfada!
            </p>
          </div>

          <div className="mb-4">
            <input
              type="text"
              placeholder="Gönderilerde ara..."
              value={filter}
              onChange={(e) => setFilter(e.target.value)}
              className="w-full p-2 border border-gray-300 rounded"
            />
          </div>

          {memoizedContent.firstPost && (
            <HeroPost
              title={memoizedContent.firstPost.title}
              coverImage={memoizedContent.firstPost.coverImage?.url || DEFAULT_COVER}
              date={memoizedContent.firstPost.publishedAt}
              slug={memoizedContent.firstPost.slug}
              excerpt={memoizedContent.firstPost.brief}
            />
          )}

          <div className="grid items-start gap-6 xl:grid-cols-2">
            {memoizedContent.secondaryPosts.map((post) => (
              <SecondaryPost
                key={post.id}
                title={post.title}
                coverImage={post.coverImage?.url || DEFAULT_COVER}
                date={post.publishedAt}
                slug={post.slug}
                excerpt={post.brief}
              />
            ))}
          </div>

          <MorePosts context="home" posts={memoizedContent.morePosts} />

          {pageInfo.hasNextPage && (
            <div ref={loadingRef} className="flex justify-center items-center py-4">
              {isLoading ? <span>Yükleniyor...</span> : <span>Daha fazla gönderi için kaydırın</span>}
            </div>
          )}
        </Container>
        <Footer />
        {process.env.NODE_ENV === 'development' && <FakeLighthouseScores />}
        <PerformanceDashboard />
      </ErrorBoundary>
    </AppProvider>
  );
}

export const getStaticProps: GetStaticProps<Props> = async () => {
  const data = await request(GQL_ENDPOINT, PostsByPublicationDocument, {
    first: POSTS_PER_PAGE,
    host: process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST,
  });

  if (!data.publication) {
    return { notFound: true };
  }

  return {
    props: {
      publication: data.publication,
      initialAllPosts: data.publication.posts.edges.map((edge) => edge.node),
      initialPageInfo: data.publication.posts.pageInfo,
    },
    revalidate: 60,
  };
};