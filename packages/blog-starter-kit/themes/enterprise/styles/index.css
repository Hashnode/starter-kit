@tailwind base;
@tailwind components;
@tailwind utilities;

.hashnode-content-style{
    @apply prose break-words text-slate-950 first:prose-p:mt-0 prose-img:max-w-full prose-p:leading-snug hover:prose-a:bg-primary-50 dark:hover:prose-a:text-primary-500 dark:hover:prose-a:bg-neutral-800 dark:text-neutral-50 prose-blockquote:leading-snug prose-a:leading-snug prose-figure:leading-snug prose-figcaption:leading-snug prose-pre:leading-snug prose-li:leading-snug prose-ul:leading-snug prose-ol:leading-snug prose-th:leading-snug prose-td:leading-snug lg:prose-xl dark:prose-invert dark:prose-pre:bg-neutral-900 first:prose-h1:mt-0 first:prose-h2:mt-0 first:prose-h3:mt-0 first:prose-h4:mt-0 first:prose-h5:mt-0;
}
/* Override to remove the backtick */
.hashnode-content-style :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::before, .hashnode-content-style :where(code):not(:where([class~="not-prose"],[class~="not-prose"] *))::after  {
    content: none;
}
.hashnode-content-style :is(:where(a):not(:where([class~=not-prose],[class~=not-prose] *))):hover {
    background-color: transparent;
    color: hsl(28, 100%, 50%);
}
.hashnode-content-style :is(:where(a):not(:where([class~=not-prose],[class~=not-prose] *))) {
    text-decoration-line: none;
}
div#circusll {
    --tw-translate-y: 7%;
    --tw-translate-x: 2%;
    font-family: monospace;
}
.hover\:text-primary-650:hover {
    --tw-text-opacity: 1;
    color: rgb(226 121 0);
}
p.text-md.leading-snug.text-slate-500.dark\:text-neutral-400 {
    font-family: "Source Serif Pro", serif;
}
.bg-slate-950 {
    background-image: url(https://i.ibb.co/2NHGvWT/image.png);
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
}
a.text-gray-700.transition.hover\:text-gray-700\/75 {
    font-family: ui-monospace;
}
.prose code {
    border-radius: 0.25rem;
    font-weight: 400 !important;
    padding: 0.25rem;
    --tw-text-opacity: 1;
    color: rgba(0, 0, 0, var(--tw-text-opacity));
    font-size: 80%;
    background: #f0efed;
}
  
.dark .prose code {
    --tw-bg-opacity: 1;
    background-color: rgba(36, 41, 46, var(--tw-bg-opacity));
    --tw-text-opacity: 1;
    color: rgba(238, 238, 238, var(--tw-text-opacity));
}
  
.prose pre {
    padding-top: 2rem !important;
    padding-bottom: 2rem !important;
}
  
.prose pre code {
    background-color: transparent;
    border-radius: 0px;
    font-weight: 500 !important;
    padding: 0px;
    font-size: 100%;
    color: #fafafa;
}

.dark .prose pre code {
    background-color: transparent;
    color: #ddd;
}


/*   Custom header title css  */

.text-5xl {
    font-size: 3rem;
    line-height: 1;
}
.mt-2 {
    margin-top: .5rem;
}
.text-purple-500 {
    --tw-text-opacity: 1;
    color: rgba(139, 92, 246, var(--tw-text-opacity));
}
.max-w-xl {
    max-width: 36rem;
}
h1, h2 {
    font-family: "Source Serif Pro", serif;
}
/* Custom Scrollbar */
::-webkit-scrollbar {
	display: none;
}

::-webkit-scrollbar-track {
	display: none;
}

::-webkit-scrollbar-thumb {
	display: none;
}

::-webkit-scrollbar-thumb:hover {
	display: none;
}


/*   scroll-up   */

*,
*:after,
*:before {
	box-sizing: border-box;
}
html {
	scroll-behavior: smooth;
}

:root {
	--line: hsl(0 0% 5% / 0.15);
	--accent: canvas;
	--padding: 2rem;
	--distance: 10vh;
	accent-color: hsl(0 100% 50%);
	color-scheme: light only;
}

#cta {
	position: sticky;
	bottom: var(--padding);
	margin-top: calc(100vh + var(--distance, 0));
	translate: calc(-100% - var(--padding)) 0;
	display: grid;
	white-space: nowrap;
	place-self: end;
	/*border-radius: 100px;*/
	/*background: var(--accent);*/
	text-decoration: none;
	/*border: 1px solid canvasText;*/
	color: canvasText;
	width: 40px;
	height: 40px;
	aspect-ratio: 1;
	place-items: center;
}

#cta svg {
	width: 24px;
	stroke-width: 3;
}

#cta:is(:hover, :focus-visible) {
	--intent: 1;
}

#cta::after {
	content: "";
	position: absolute;
	inset: 0;
	background: canvasText;
	border-radius: 100px;
	opacity: calc(var(--intent, 0) * 0.1);
	transition: opacity 0.2s;
}

@supports (animation-timeline: scroll()) {
	@property --show {
		inherits: true;
		initial-value: 0;
		syntax: '<number>';
	}
	#cta {
		position: fixed;
		bottom: var(--padding);
		right: var(--padding);
		translate: 0 calc(20vh - (var(--show, 0) * 20vh));
		transition: translate 0.875s linear(
	    0, 0.5007 7.21%, 0.7803 12.29%,
	    0.8883 14.93%, 0.9724 17.63%,
	    1.0343 20.44%, 1.0754 23.44%,
	    1.0898 25.22%, 1.0984 27.11%,
	    1.1014 29.15%, 1.0989 31.4%,
	    1.0854 35.23%, 1.0196 48.86%,
	    1.0043 54.06%, 0.9956 59.6%,
	    0.9925 68.11%, 1
	  );
	}	
	body {
		animation: show-cta both steps(1);
		animation-timeline: scroll(root);
		animation-range: 0 var(--distance);
	}
	@keyframes show-cta {
		to { --show: 1; }
	}
}

